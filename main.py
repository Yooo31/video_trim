from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

from process.downloadVideo import VideoDownloader
from process.videoEditor import VideoEditor
from process.videoSender import VideoSender

from dotenv import load_dotenv
import os
import json

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

def getInformations():
  with open("informations.json", "r") as file:
    data = json.load(file)
    timing = data["timing"]
    last_url = data["last_url"]
    last_date = data["last_date"]
    title = data["title"]
    author = data["author"]

  return f"Vid√©o pr√©c√©dente : \n\nüìÖ Date : {last_date}\nüîó URL : {last_url}\nüé¨ Dur√©e : {timing} secondes\nü§≥ Cr√©dits : {title} | {author}\n\n"

def start(update, context):
  keyboard = [
            [InlineKeyboardButton("‚öôÔ∏è Param√©tres ‚öôÔ∏è", callback_data="settings")],
            [InlineKeyboardButton("üé¨ Commencer üé¨", callback_data="starting")],
            [InlineKeyboardButton("‚ùì Derni√®re Vid√©o ‚ùì", callback_data="last_video")]
  ]

  reply_markup = InlineKeyboardMarkup(keyboard)
  update.message.reply_text("Que voulez vous faire ?", reply_markup=reply_markup)

def startButton(update, context):
    query = update.callback_query

    if query.data == "settings":
      chat_id = query.message.chat_id
      currentTiming = VideoEditor.get_video_timing()

      context.bot.send_message(chat_id=chat_id, text="Quelle est la nouvelle dur√©e de chaque vid√©o ? Dur√©e actuelle : " + str(currentTiming) + " secondes.")
      context.user_data["state"] = "WAITING_FOR_TIMING"

      return "WAITING_FOR_TIMING"

    elif query.data == "starting":
      chat_id = query.message.chat_id

      context.bot.send_message(chat_id=chat_id, text="Envoyer l'URL de la vid√©o")
      context.user_data["state"] = "WAITING_FOR_URL"

      return "WAITING_FOR_URL"

    elif query.data == "last_video":
      message = getInformations()

      chat_id = query.message.chat_id
      context.bot.send_message(chat_id=chat_id, text=message)

def handle_text(update, context):
    state = context.user_data.get("state")

    if state == "WAITING_FOR_TIMING":
      timing = update.message.text
      chat_id = update.message.chat_id

      if VideoEditor.set_video_timing(timing):
        message = f"La dur√©e de chaque vid√©o a √©t√© param√©tr√©e √† {timing}"
      else:
        message = "La dur√©e de chaque vid√©o n'a pas √©t√© param√©tr√©e correctement. Veuillez saisir un entier inf√©rieur ou √©gal √† 180."

      context.bot.send_message(chat_id=chat_id,  text= message)
      context.user_data["state"] = None
      start(update, context)

    elif state == "WAITING_FOR_URL":
      url = update.message.text
      chat_id = update.message.chat_id
      downloader = VideoDownloader(url)

      if downloader.validate_url():
        context.bot.send_message(chat_id=chat_id, text="Vid√©o valide, t√©l√©chargement en cours...")

        try:
          downloader.download_video()
          context.bot.send_message(chat_id=chat_id, text="Vid√©o t√©l√©charg√©e avec succ√®s!")
        except Exception as e:
          context.bot.send_message(chat_id=chat_id, text="Une erreur est survenue lors du t√©l√©chargement de la vid√©o.")

        try:
          VideoEditor.change_format()
        except Exception as e:
          context.bot.send_message(chat_id=chat_id, text="Une erreur est survenue lors du changement du format")

        try:
          VideoEditor.cut_video()
        except Exception as e:
          context.bot.send_message(chat_id=chat_id, text="Une erreur est survenue lors du d√©coupage")

        try:
          VideoSender.send_videos(context.bot, chat_id)
        except Exception as e:
          context.bot.send_message(chat_id=chat_id, text="Une erreur est survenue lors de l'envoie des vid√©os")

        try:
          title, author = downloader.get_title_and_author();
          context.bot.send_message(chat_id=chat_id, text="ü§≥ Cr√©dits: " + title + " | " + author + "\nProvenance : YouTube üì∫")
        except Exception as e:
          context.bot.send_message(chat_id=chat_id, text="Une erreur est survenue lors de la r√©cup√©ration des informations")

      else:
        context.bot.send_message(chat_id=chat_id, text="L'URL de la vid√©o est invalide. Veuillez saisir une URL valide.")

      context.user_data["state"] = None

    else:
      update.message.reply_text("Veuillez choisir une option √† partir des boutons ci-dessous.")
      start(update, context)

def main():
  updater = Updater(BOT_TOKEN, use_context=True)

  dp = updater.dispatcher

  dp.add_handler(CommandHandler("start", start))
  dp.add_handler(CallbackQueryHandler(startButton))

  dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

  updater.start_polling()
  updater.idle()

print("Bot started")
main()
